#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('anonymouschatsystem:server');
const http = require('http');
const config = require("../config");


/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

//Socket.io提供了基于事件的实时双向通讯
//TCP用主机的IP地址加上主机上的端口号作为TCP连接的端点，
//这种端点就叫做套接字（socket）或插口
const socketIo= require('socket.io');
const io = socketIo(server);
const socketIoLogic = require("./socketIoLogic");


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(config.appconfig.port);

//io建立连接
socketIoLogic.registerSocketIoLogic(io);

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  app.logInfo("default").info("服务已启动");
  console.log(`server listening on ${bind} !`)
}
